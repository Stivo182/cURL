#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем КонтекстЯдра;
Перем Ожидаем;
Перем CURL;

#КонецОбласти

#Область ПрограммныйИнтерфейс

Процедура Инициализация(КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	Ожидаем = КонтекстЯдра.Плагин("УтвержденияBDD");
	
	НайтиИПодключитьCURL();
		
КонецПроцедуры

Процедура ЗаполнитьНаборТестов(НаборТестов, КонтекстЯдраПараметр) Экспорт
	
	КонтекстЯдра = КонтекстЯдраПараметр;
	
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_СЗаголовками");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_ДвоичныеДанные");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_БезТела");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоТекст");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоСтруктура");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоСоответствие");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоДвоичныеДанные");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоФайл");  
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_POST_ТелоДвоичныеДанныеВоВременномХранилище"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_САутентификациейBasic"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_CАутентификациейDigest"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапрос"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_НеПеренаправлятьЗапрос"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапросНаДругойХостБезАутентификации"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапросНаДругойХостСАутентификацией"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_HTTP_PUT"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_HTTP_PUT_Файл"); 
	НаборТестов.Добавить("ТестДолжен_ОтправитьЗапрос_HTTP_PUT_ДвоичныеДанные"); 
	НаборТестов.Добавить("ТестДолжен_ПередатьФайл_HTTP");
	НаборТестов.Добавить("ТестДолжен_ВызовИсключенияПриНеверномПутиКИсполняемомуФайлу"); 
	НаборТестов.Добавить("ТестДолжен_ПроверитьЗаголовкиОтветаМожетСодержатьКлючСНесколькимиЗначениями");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьВозможностьПолученияЗаголовкаЗапросаПоИмениВнеЗависимостиОтРегистра");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьВозможностьПолученияЗаголовкаОтветаПоИмениВнеЗависимостиОтРегистра");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоКукиОбновленыПослеВыполненияЗапроса");	
	НаборТестов.Добавить("ТестДолжен_ПроверитьЧтоКукиНеОбновленыПослеВыполненияЗапроса");	
	НаборТестов.Добавить("ТестДолжен_ПолучитьФайл_FTP");	
	НаборТестов.Добавить("ТестДолжен_ВыполнитьАвторизацию_FTP");	
	НаборТестов.Добавить("ТестДолжен_ПопытатьсяВыполнитьАвторизациюСНевернымиДанными_FTP");
	НаборТестов.Добавить("ТестДолжен_ПопытатьсяПолучитьНесуществующийФайлИВернутьСостояние550_FTP");
		
	НаборТестов.Добавить("ТестДолжен_ПроверитьНаличиеВКомандеДобавленнойПользовательскойОпции");
	НаборТестов.Добавить("ТестДолжен_ПроверитьОтсутствиеВКомандеУдаленнойПользовательскойОпции");
	НаборТестов.Добавить("ТестДолжен_ПроверитьОтсутствиеВКомандеОчищенныхПользовательскихОпций");

КонецПроцедуры

Процедура ПередЗапускомТеста() Экспорт
		
	CURL = ВнешниеОбработки.Создать("cURL");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ТестДолжен_ОтправитьЗапрос_GET() Экспорт
	
	CURL.Get("https://httpbin.org/get");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_СЗаголовками() Экспорт
	
	Агент = "1C:Enterprise";
	Ответ = CURL.УстановитьЗаголовок("User-Agent", Агент)
				.Get("https://httpbin.org/get")
				.ОтветКакJson();
	
	Ожидаем.Что(Ответ["headers"]["User-Agent"]).Равно(Агент);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_ДвоичныеДанные() Экспорт
	
	Размер = 16;
	URL = СтрШаблон("https://httpbin.org/bytes/%1", Формат(Размер, "ЧГ="));
	
	ДвоичныеДанные = CURL.GetBinaryData(URL);
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(ДвоичныеДанные.Размер()).Равно(Размер);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_БезТела() Экспорт
	
	CURL.Post("https://httpbin.org/post");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоТекст() Экспорт
	
	Данные = СтрШаблон("Name=%1&Id=%2&Cyrillic=%3", "blink", "182", КодироватьСтроку("Йогурт", СпособКодированияСтроки.КодировкаURL));
	Ответ = CURL.Post("https://httpbin.org/post", Данные).ОтветКакJson();
	
	Ожидаем.Что(Ответ["form"]["Name"]).Равно("blink");
	Ожидаем.Что(Ответ["form"]["Id"]).Равно("182");
	Ожидаем.Что(Ответ["form"]["Cyrillic"]).Равно("Йогурт");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоСтруктура() Экспорт
	
	Тело = Новый Структура();
	Тело.Вставить("Name", "blink");
	Тело.Вставить("Id", 182);
	Тело.Вставить("Bool", Истина);
	Тело.Вставить("Cyrillic", "Йогурт");
	Тело.Вставить("SpecChars", "p=1&p=2");

	Ответ = CURL.Post("https://httpbin.org/post", Тело).ОтветКакJson();
	
	Ожидаем.Что(Ответ["form"]["Name"]).Равно("blink");
	Ожидаем.Что(Ответ["form"]["Id"]).Равно("182");
	Ожидаем.Что(Ответ["form"]["Bool"]).Равно("true");
	Ожидаем.Что(Ответ["form"]["Cyrillic"]).Равно("Йогурт");
	Ожидаем.Что(Ответ["form"]["SpecChars"]).Равно("p=1&p=2");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоСоответствие() Экспорт
	
	Тело = Новый Соответствие();
	Тело.Вставить("Name", "blink");
	Тело.Вставить("Id", 182);
	Тело.Вставить("Bool", Истина);
	Тело.Вставить("Cyrillic", "Йогурт");
	Тело.Вставить("SpecChars", "p=1&p=2");

	Ответ = CURL.Post("https://httpbin.org/post", Тело).ОтветКакJson();
	
	Ожидаем.Что(Ответ["form"]["Name"]).Равно("blink");
	Ожидаем.Что(Ответ["form"]["Id"]).Равно("182");
	Ожидаем.Что(Ответ["form"]["Bool"]).Равно("true");
	Ожидаем.Что(Ответ["form"]["Cyrillic"]).Равно("Йогурт");
	Ожидаем.Что(Ответ["form"]["SpecChars"]).Равно("p=1&p=2");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоДвоичныеДанные() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	Поток = Новый ПотокВПамяти(Буфер); 
	
	Тело = Поток.ЗакрытьИПолучитьДвоичныеДанные();   
	
	Ответ = CURL.Post("https://httpbin.org/post", Тело).ОтветКакJson();
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоФайл() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
  	Файл = Новый Файл(ПутьКФайлу);
	
	Попытка
		Ответ = CURL.Post("https://httpbin.org/post", Файл).ОтветКакJson();
	Исключение
		УдалитьФайлы(ПутьКФайлу);	
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	УдалитьФайлы(ПутьКФайлу);
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_POST_ТелоДвоичныеДанныеВоВременномХранилище() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
  	
  	Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
	Ответ = CURL.Post("https://httpbin.org/post", Адрес).ОтветКакJson();
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_САутентификациейBasic() Экспорт

	Ответ = CURL.АутентификацияНаСервере("user", "secret")
				.Get("https://httpbin.org/basic-auth/user/secret")
				.ОтветКакJson();
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Ответ["authenticated"]).Равно(Истина);
	Ожидаем.Что(Ответ["user"]).Равно("user");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_CАутентификациейDigest() Экспорт

	Ответ = CURL.АутентификацияНаСервереDigest("user", "secret")
				.Get("https://httpbin.org/digest-auth/auth/user/secret")
				.ОтветКакJson();
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Ответ["authenticated"]).Равно(Истина);
	Ожидаем.Что(Ответ["user"]).Равно("user");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапрос() Экспорт
	
	Location = КодироватьСтроку("https://httpbin.org/status/200", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/redirect-to?url=%1&status_code=301", Location);
	
	CURL.ПеренаправлятьЗапрос().Get(URL);
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_НеПеренаправлятьЗапрос() Экспорт
	
	Location = КодироватьСтроку("https://httpbin.org/status/200", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/redirect-to?url=%1&status_code=301", Location);
	
	CURL.Get(URL);
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(301);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапросНаДругойХостБезАутентификации() Экспорт
	
	Location = КодироватьСтроку("https://postman-echo.com/headers", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/redirect-to?url=%1&status_code=301", Location);
	
	Ответ = CURL
		.ПеренаправлятьЗапрос()
		.АутентификацияНаСервере("user", "secret")
		.Get(URL)
		.ОтветКакJson();
		
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Ответ["headers"].Получить("authorization")).ЭтоНеопределено();
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_GET_ПеренаправитьЗапросНаДругойХостСАутентификацией() Экспорт

	Location = КодироватьСтроку("https://postman-echo.com/headers", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/redirect-to?url=%1&status_code=301", Location);

	Ответ = CURL
		.ПеренаправлятьЗапрос(, Истина)
		.АутентификацияНаСервере("user", "secret")
		.Get(URL)
		.ОтветКакJson();
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Ответ["headers"].Получить("authorization")).Не_().ЭтоНеопределено();
		
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_HTTP_PUT() Экспорт
	
	CURL.Put("https://httpbin.org/put");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_HTTP_PUT_Файл() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
  	Файл = Новый Файл(ПутьКФайлу);
	
	Попытка
		Ответ = CURL.Put("https://httpbin.org/put", Файл).ОтветКакJson();
	Исключение
		УдалитьФайлы(ПутьКФайлу);	
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	УдалитьФайлы(ПутьКФайлу);
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ОтправитьЗапрос_HTTP_PUT_ДвоичныеДанные() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	Поток = Новый ПотокВПамяти(Буфер); 
	
	Тело = Поток.ЗакрытьИПолучитьДвоичныеДанные();   
	
	Ответ = CURL.Put("https://httpbin.org/put", Тело).ОтветКакJson();
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ПередатьФайл_HTTP() Экспорт
	
	Буфер = Новый БуферДвоичныхДанных(16);
  	ДвоичныеДанные = ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(Буфер);
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ДвоичныеДанные.Записать(ПутьКФайлу);
	
	Попытка
		Ответ = CURL.UploadFile("https://httpbin.org/put", ПутьКФайлу).ОтветКакJson();
	Исключение
		УдалитьФайлы(ПутьКФайлу);	
		ВызватьИсключение ОбработкаОшибок.ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	УдалитьФайлы(ПутьКФайлу);
				
	Ожидаем.Что(Ответ["headers"]["Content-Length"]).Равно("16");
	
КонецПроцедуры

Процедура ТестДолжен_ВызовИсключенияПриНеверномПутиКИсполняемомуФайлу() Экспорт
	
	БылоИсключение = Ложь;
	Попытка
		CURL.УказатьИсполняемыйФайл("ccurl")
			.Get("https://httpbin.org/get");
	Исключение
		БылоИсключение = Истина;
	КонецПопытки;
	
	Ожидаем.Что(БылоИсключение, "Не вызывалось исключение при неверном пути к исполняемому файлу").Равно(Истина);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЗаголовкиОтветаМожетСодержатьКлючСНесколькимиЗначениями() Экспорт
	
	Параметр1 = КодироватьСтроку("name=Jack", СпособКодированияСтроки.КодировкаURL);
	Параметр2 = КодироватьСтроку("age=25", СпособКодированияСтроки.КодировкаURL);
	
	URL = СтрШаблон("https://httpbin.org/response-headers?set-cookie=%1&set-cookie=%2", Параметр1, Параметр2);

	ЗаголовкиОтвета = CURL.Get(URL).ЗаголовкиОтвета();
	
	ЗначениеЗаголовка = ЗаголовкиОтвета.Получить("set-cookie");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(ЗначениеЗаголовка, "Ожидаем тип Массив").ИмеетТип(Тип("Массив"));
	Ожидаем.Что(ЗначениеЗаголовка.Количество(), "Ожидаем 2 элемента").Равно(2);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВозможностьПолученияЗаголовкаЗапросаПоИмениВнеЗависимостиОтРегистра() Экспорт
	
	Эталон = "name=value";
	CURL.УстановитьЗаголовок("COOKIE", Эталон);
	
	Значение = CURL.Заголовок("Cookie");
	
	Ожидаем.Что(Значение).Равно(Эталон);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьВозможностьПолученияЗаголовкаОтветаПоИмениВнеЗависимостиОтРегистра() Экспорт
	
	Эталон = "text/html; charset=utf-8";
	
	Параметр = КодироватьСтроку(Эталон, СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/response-headers?Content-Type=%1", Параметр);

	Значение = CURL
		.Get(URL)
		.ЗаголовокОтвета("Content-TYPE");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Значение).Равно(Эталон);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоКукиОбновленыПослеВыполненияЗапроса() Экспорт
	
	Параметр = КодироватьСтроку("Age=18", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/response-headers?set-cookie=%1", Параметр);

	Куки = CURL
		.УстановитьКуки("Name=Jhon")
		.Get(URL)
		.Куки();
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Куки.Получить("Name")).Равно("Jhon");
	Ожидаем.Что(Куки.Получить("Age")).Равно("18");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьЧтоКукиНеОбновленыПослеВыполненияЗапроса() Экспорт
	
	Параметр = КодироватьСтроку("Age=18", СпособКодированияСтроки.КодировкаURL);
	URL = СтрШаблон("https://httpbin.org/response-headers?set-cookie=%1", Параметр);

	Куки = CURL
		.УстановитьКуки("Name=Jhon")
		.ОбновлятьКуки(Ложь)
		.Get(URL)
		.Куки();
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(200);
	Ожидаем.Что(Куки.Получить("Name")).Равно("Jhon");
	Ожидаем.Что(Куки.Получить("Age")).ЭтоНеопределено();
	
КонецПроцедуры

Процедура ТестДолжен_ПолучитьФайл_FTP() Экспорт
	
	Текст = CURL.GetString("ftp://demo:password@test.rebex.net/readme.txt");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(226);
	Ожидаем.Что(Текст).Заполнено();
	
КонецПроцедуры

Процедура ТестДолжен_ВыполнитьАвторизацию_FTP() Экспорт
	
	CURL.АутентификацияНаСервере("demo", "password")
		.Get("ftp://test.rebex.net");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(226);
	
КонецПроцедуры

Процедура ТестДолжен_ПопытатьсяВыполнитьАвторизациюСНевернымиДанными_FTP() Экспорт
	
	CURL.АутентификацияНаСервере("curl", "password")
		.Get("ftp://test.rebex.net");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(530);
	
КонецПроцедуры

Процедура ТестДолжен_ПопытатьсяПолучитьНесуществующийФайлИВернутьСостояние550_FTP() Экспорт
	
	CURL.Get("ftp://demo:password@test.rebex.net/readme_.txt");
	
	Ожидаем.Что(CURL.КодСостояния()).Равно(550);
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьНаличиеВКомандеДобавленнойПользовательскойОпции() Экспорт
	
	CURL.ДобавитьОпцию("--limit-rate", "1000");
	
	Команда = CURL.СобратьКоманду("http://example.com/");
	
	Ожидаем.Что(Команда).Содержит("--limit-rate ""1000""");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтсутствиеВКомандеУдаленнойПользовательскойОпции() Экспорт
	
	CURL.ДобавитьОпцию("--limit-rate", "1000");
	CURL.УдалитьОпцию("--limit-rate");
	
	Команда = CURL.СобратьКоманду("http://example.com/");
	
	Ожидаем.Что(Команда).Не_().Содержит("--limit-rate");
	
КонецПроцедуры

Процедура ТестДолжен_ПроверитьОтсутствиеВКомандеОчищенныхПользовательскихОпций() Экспорт
	
	CURL.ДобавитьОпцию("--limit-rate", "1000");
	CURL.ОчиститьОпции();
	
	Команда = CURL.СобратьКоманду("http://example.com/");
	
	Ожидаем.Что(Команда).Не_().Содержит("--limit-rate");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура НайтиИПодключитьCURL()
	
	Файл = Новый Файл(ИспользуемоеИмяФайла);
	ПутьККаталогу = Файл.Путь;
	
	Файлы = НайтиФайлы(ПутьККаталогу, "cURL.epf");
	Если Файлы.Количество() = 0 Тогда
		ВызватьИсключение "Не найден файл cURL.epf в каталоге с тестами";
	КонецЕсли;
	
	ВнешниеОбработки.Создать(Файлы[0].ПолноеИмя, Ложь);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли